# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SjgA9ntXg-bGdT3I-7RAqV97iMgsAeBF
"""

!unzip /content/drive/MyDrive/Datasets.zip

import random
import numpy as np
random.seed(1337)
np.random.seed(1337)

import os
import random

dataset_train_pos_path = "Datasets/aclImdb/train/pos/"
dataset_train_neg_path = "Datasets/aclImdb/train/neg/"

dataset_test_pos_path = "Datasets/aclImdb/test/pos/"
dataset_test_neg_path = "Datasets/aclImdb/test/neg/"

def read_dataset(dataset_path, label):
    contents_labels = []
    files = os.listdir(dataset_path)
    for fn in files:
        path = os.path.join(dataset_path, fn)
        with open(path) as f:
            s = f.read()
            contents_labels.append((s, label))
    return contents_labels

train_pos = read_dataset(dataset_train_pos_path, "pos")
train_neg = read_dataset(dataset_train_neg_path, "neg")

test_pos = read_dataset(dataset_test_pos_path, "pos")
test_neg = read_dataset(dataset_test_neg_path, "neg")

train = train_pos + train_neg
test = test_pos + test_neg

random.shuffle(train)
random.shuffle(test)

train_data, y_train = zip(*train)
test_data, y_test = zip(*test)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.feature_extraction.text import TfidfVectorizer
# 
# vectorizer = TfidfVectorizer()
# X_train = vectorizer.fit_transform(train_data)
# X_test = vectorizer.transform(test_data)
# print("The dimensions of our vectors:")
# print(X_train.shape)
# print("- - -")

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# from sklearn.svm import LinearSVC
# 
# svm_classifier = LinearSVC()
# svm_classifier.fit(X_train, y_train)
# 
# predictions = svm_classifier.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report

print("Accuracy: {}\n".format(accuracy_score(y_test, predictions)))
print(classification_report(y_test, predictions))

good_review = "The restaurant was really great! I ate wonderful food and had a very good time"
bad_review = "The restuarant was awful. The staff were rude and the food was horrible. I hated it"

restuarant_reviews = [good_review, bad_review]
vectors = vectorizer.transform(restuarant_reviews)
print(svm_classifier.predict(vectors))